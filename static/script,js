// Modern Expense Tracker JavaScript

document.addEventListener('DOMContentLoaded', function() {
    // Initialize all components
    initializeAnimations();
    initializeFormValidation();
    initializeDeleteConfirmation();
    initializeNotifications();
    initializeTheme();
});

// Smooth animations for page load
function initializeAnimations() {
    // Add fade-in animation to cards
    const cards = document.querySelectorAll('.card, .stat-card, .list-group-item');
    cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            card.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, index * 100);
    });
}

// Form validation
function initializeFormValidation() {
    const forms = document.querySelectorAll('form');
    
    forms.forEach(form => {
        form.addEventListener('submit', function(e) {
            if (!validateForm(this)) {
                e.preventDefault();
            } else {
                // Add loading state to submit button
                const submitButton = this.querySelector('button[type="submit"], input[type="submit"]');
                if (submitButton) {
                    const originalText = submitButton.textContent || submitButton.value;
                    submitButton.disabled = true;
                    submitButton.innerHTML = '<span class="loading"></span> Processing...';
                    
                    // Restore button after 3 seconds if form hasn't submitted
                    setTimeout(() => {
                        submitButton.disabled = false;
                        submitButton.textContent = originalText;
                    }, 3000);
                }
            }
        });
        
        // Real-time validation
        const inputs = form.querySelectorAll('input, textarea');
        inputs.forEach(input => {
            input.addEventListener('blur', () => validateField(input));
            input.addEventListener('input', () => clearFieldError(input));
        });
    });
}

function validateForm(form) {
    let isValid = true;
    const inputs = form.querySelectorAll('input[required], textarea[required]');
    
    inputs.forEach(input => {
        if (!validateField(input)) {
            isValid = false;
        }
    });
    
    return isValid;
}

function validateField(field) {
    const value = field.value.trim();
    const fieldName = field.name;
    let isValid = true;
    let errorMessage = '';
    
    // Clear previous errors
    clearFieldError(field);
    
    // Required field validation
    if (field.hasAttribute('required') && !value) {
        errorMessage = 'This field is required';
        isValid = false;
    }
    
    // Specific field validations
    switch (fieldName) {
        case 'amount':
            if (value && (isNaN(value) || parseFloat(value) <= 0)) {
                errorMessage = 'Please enter a valid positive amount';
                isValid = false;
            }
            break;
        case 'username':
            if (value && value.length < 3) {
                errorMessage = 'Username must be at least 3 characters long';
                isValid = false;
            }
            break;
        case 'password':
            if (value && value.length < 6) {
                errorMessage = 'Password must be at least 6 characters long';
                isValid = false;
            }
            break;
        case 'confirm_password':
            const passwordField = field.form.querySelector('input[name="password"]');
            if (passwordField && value !== passwordField.value) {
                errorMessage = 'Passwords do not match';
                isValid = false;
            }
            break;
    }
    
    if (!isValid) {
        showFieldError(field, errorMessage);
    }
    
    return isValid;
}

function showFieldError(field, message) {
    field.style.borderColor = 'var(--danger-color)';
    
    // Create or update error message
    let errorElement = field.parentNode.querySelector('.field-error');
    if (!errorElement) {
        errorElement = document.createElement('div');
        errorElement.className = 'field-error';
        errorElement.style.color = 'var(--danger-color)';
        errorElement.style.fontSize = '0.875rem';
        errorElement.style.marginTop = '0.25rem';
        field.parentNode.appendChild(errorElement);
    }
    errorElement.textContent = message;
}

function clearFieldError(field) {
    field.style.borderColor = 'var(--border-color)';
    const errorElement = field.parentNode.querySelector('.field-error');
    if (errorElement) {
        errorElement.remove();
    }
}

// Delete confirmation
function initializeDeleteConfirmation() {
    const deleteForms = document.querySelectorAll('form[action*="delete"]');
    
    deleteForms.forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const modal = createConfirmationModal(
                'Delete Expense',
                'Are you sure you want to delete this expense? This action cannot be undone.',
                () => {
                    // User confirmed, submit the form
                    this.submit();
                }
            );
            
            document.body.appendChild(modal);
            modal.showModal();
        });
    });
}

function createConfirmationModal(title, message, onConfirm) {
    const modal = document.createElement('dialog');
    modal.className = 'confirmation-modal';
    modal.innerHTML = `
        <div class="modal-content">
            <h3>${title}</h3>
            <p>${message}</p>
            <div class="modal-actions">
                <button type="button" class="btn btn-secondary cancel-btn">Cancel</button>
                <button type="button" class="btn btn-danger confirm-btn">Delete</button>
            </div>
        </div>
    `;
    
    // Add modal styles
    modal.style.cssText = `
        border: none;
        border-radius: var(--border-radius);
        padding: 0;
        max-width: 400px;
        box-shadow: var(--shadow-lg);
        background: var(--surface-color);
    `;
    
    const modalContent = modal.querySelector('.modal-content');
    modalContent.style.padding = '2rem';
    
    const modalActions = modal.querySelector('.modal-actions');
    modalActions.style.cssText = `
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 1.5rem;
    `;
    
    // Event listeners
    modal.querySelector('.cancel-btn').addEventListener('click', () => {
        modal.close();
        modal.remove();
    });
    
    modal.querySelector('.confirm-btn').addEventListener('click', () => {
        onConfirm();
        modal.close();
        modal.remove();
    });
    
    // Close on backdrop click
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.close();
            modal.remove();
        }
    });
    
    return modal;
}

// Notification system
function initializeNotifications() {
    // Auto-hide flash messages after 5 seconds
    const alerts = document.querySelectorAll('.alert');
    alerts.forEach(alert => {
        setTimeout(() => {
            alert.style.opacity = '0';
            alert.style.transform = 'translateY(-20px)';
            setTimeout(() => alert.remove(), 300);
        }, 5000);
        
        // Add close button
        const closeBtn = document.createElement('button');
        closeBtn.innerHTML = 'Ã—';
        closeBtn.style.cssText = `
            background: none;
            border: none;
            font-size: 1.5rem;
            float: right;
            cursor: pointer;
            line-height: 1;
            opacity: 0.7;
        `;
        closeBtn.addEventListener('click', () => {
            alert.style.opacity = '0';
            alert.style.transform = 'translateY(-20px)';
            setTimeout(() => alert.remove(), 300);
        });
        alert.appendChild(closeBtn);
    });
}

// Theme management
function initializeTheme() {
    // Add smooth transitions to all elements
    document.body.style.transition = 'background-color 0.3s ease, color 0.3s ease';
    
    // Optional: Add theme toggle functionality
    const themeToggle = document.querySelector('.theme-toggle');
    if (themeToggle) {
        themeToggle.addEventListener('click', toggleTheme);
    }
}

function toggleTheme() {
    const body = document.body;
    const isDark = body.classList.contains('dark-theme');
    
    if (isDark) {
        body.classList.remove('dark-theme');
        localStorage.setItem('theme', 'light');
    } else {
        body.classList.add('dark-theme');
        localStorage.setItem('theme', 'dark');
    }
}

// Utility functions
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `alert alert-${type} fade-in`;
    notification.textContent = message;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        min-width: 300px;
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateY(-20px)';
        setTimeout(() => notification.remove(), 300);
    }, 4000);
}

function formatCurrency(amount) {
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
    }).format(amount);
}

function formatDate(date) {
    return new Intl.DateTimeFormat('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    }).format(new Date(date));
}

// Export functions for use in templates
window.ExpenseTracker = {
    showNotification,
    formatCurrency,
    formatDate,
    createConfirmationModal
};